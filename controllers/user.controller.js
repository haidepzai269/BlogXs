const pool = require('../db');
const bcrypt = require('bcryptjs');

// L·∫•y th√¥ng tin profile
exports.getProfile = async (req, res) => {
  const userId = req.user.id;
  try {
    const result = await pool.query(
      'SELECT id, username, email, avatar_url, cover_url FROM users WHERE id = $1',
      [userId]
    );
    if (result.rows.length === 0) {
      return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    }
    res.json(result.rows[0]); // ‚úÖ B√¢y gi·ªù tr·∫£ v·ªÅ th√™m avatar_url v√† cover_url
  } catch (error) {
    console.error('L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
};


// C·∫≠p nh·∫≠t profile
exports.updateProfile = async (req, res) => {
  const userId = req.user.id;
  const { username, email, password } = req.body;

  try {
    // L·∫•y th√¥ng tin hi·ªán t·∫°i
    const result = await pool.query('SELECT * FROM users WHERE id = $1', [userId]);
    if (result.rows.length === 0) {
      return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    }

    // C·∫≠p nh·∫≠t
    const hashedPassword = password ? await bcrypt.hash(password, 10) : result.rows[0].password;

    await pool.query(
      'UPDATE users SET username = $1, email = $2, password = $3 WHERE id = $4',
      [username, email, hashedPassword, userId]
    );

    res.json({ message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng' });
  } catch (error) {
    console.error('L·ªói c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
};



exports.getUserMiniProfile = async (req, res) => {
  try {
    const { username } = req.params;
    console.log('üîç L·∫•y th√¥ng tin mini c·ªßa user:', username);

    const result = await pool.query(
      'SELECT username, avatar_url, cover_url, created_at FROM users WHERE username = $1',
      [username]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'User not found' });
    }

    res.json(result.rows[0]);
  } catch (err) {
    console.error('‚ùå L·ªói trong getUserMiniProfile:', err.message);
    res.status(500).json({ error: 'Server error', detail: err.message });
  }
};


exports.updateTheme = async (req, res) => {
  const userId = req.user.id;
  const { theme } = req.body;

  if (!['light', 'dark'].includes(theme)) {
    return res.status(400).json({ message: 'Theme kh√¥ng h·ª£p l·ªá' });
  }

  try {
    await pool.query('UPDATE users SET theme = $1 WHERE id = $2', [theme, userId]);
    res.json({ message: 'C·∫≠p nh·∫≠t theme th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t theme:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};
